{"version":3,"file":"static/js/895.ebbcaf75.chunk.js","mappings":"6PAEaA,EAAYC,EAAAA,EAAAA,IAAH,6CAITC,EAAOD,EAAAA,EAAAA,KAAH,8IASJE,EAAOF,EAAAA,EAAAA,EAAH,qCAIJG,EAASH,EAAAA,EAAAA,OAAH,uHAQNI,EAAYJ,EAAAA,EAAAA,MAAH,wG,2DC2DtB,EA7E8B,WAC1B,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IAExBC,EAAgB,SAACC,GACnB,OAAOC,EAAAA,GAAAA,MAAA,UAAeD,EAAf,0BAA6C,CAClDE,SAAU,YACVC,UAAW,KACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,QAEV,EAEGC,EAAc,SAACC,GACjB,MAAqBA,EAAMC,cAApBzB,EAAP,EAAOA,KAAK0B,EAAZ,EAAYA,MAEZ,OAAO1B,GACH,IAAK,OACT,OAAOC,EAAQyB,GACX,IAAK,SACT,OAAOvB,EAAUuB,GACb,QACJ,OAAOC,QAAQC,IAAI,eAEtB,EAiBD,OACI,SAACnC,EAAD,WACA,UAACE,EAAD,CAAMkC,SAjBY,SAACL,GAEnB,GADAA,EAAMM,iBACHxB,EAAayB,MAAK,SAAAC,GAAM,OAAIA,EAAOhC,KAAKiC,gBAAkB,UAAGjC,GAAOiC,aAA5C,IACzB,OAAOtB,EAAcX,GAGvB,GAAGM,EAAayB,MAAK,SAAAC,GAAM,OAAIA,EAAO9B,SAAP,UAAqBA,EAAzB,IACzB,OAAOS,EAAcT,GAGvB,IAAMgC,EAAa,CAACC,GAAG,GAAD,QAAKC,EAAAA,EAAAA,OAAYpC,KAAK,GAAD,OAAIA,GAAQE,OAAO,GAAD,OAAIA,IACjEE,GAASiC,EAAAA,EAAAA,IAAiBH,IAC1BV,EAAMC,cAAca,OACvB,EAIG,WACA,SAAC1C,EAAD,oBACA,SAACE,EAAD,CACAyC,SAAUhB,EACViB,KAAK,OACLxC,KAAK,OACLyC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAER,SAAC/C,EAAD,sBACA,SAACE,EAAD,CACAyC,SAAUhB,EACNiB,KAAK,MACLxC,KAAK,SACLyC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAEZ,SAAC9C,EAAD,CAAQ2C,KAAK,SAAb,SAAuB/B,EAAY,aAAe,qBAKzD,EC/EYb,GAHQF,EAAAA,EAAAA,GAAH,wBAGEA,EAAAA,EAAAA,EAAH,sCAIJI,EAAYJ,EAAAA,EAAAA,MAAH,wG,UCgBtB,EArBe,WAEX,IAAMU,GAAWC,EAAAA,EAAAA,MACXuC,GAAcrC,EAAAA,EAAAA,IAAYsC,EAAAA,IAM/B,OACO,iCACA,SAAC,EAAD,qCACA,SAAC,EAAD,CACAN,SARW,SAACf,GAClBpB,GAAS0C,EAAAA,EAAAA,GAAe,CAAEF,YAAapB,EAAMC,cAAcC,MAAMO,gBAClE,EAOOjC,KAAK,SACL0B,MAAQkB,MAInB,ECrBYG,EAAarD,EAAAA,EAAAA,GAAH,4CAIVsD,EAAatD,EAAAA,EAAAA,GAAH,6CAIVuD,EAAUvD,EAAAA,EAAAA,OAAF,yGCoCrB,EAvCqB,WAEjB,IAAMU,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,IAAYC,EAAAA,IAC3BoC,GAAcrC,EAAAA,EAAAA,IAAYsC,EAAAA,IAC1BpC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,IACxBwC,GAAU3C,EAAAA,EAAAA,IAAY4C,EAAAA,KAE5BC,EAAAA,EAAAA,YAAU,WACNhD,GAASiD,EAAAA,EAAAA,MACV,GAAE,CAACjD,IAEN,IAAMkD,EAAa,SAAC9B,GAChBG,QAAQC,IAAI,iBACZ,IAAMO,EAAKX,EAAMC,cAAcU,GAC/B/B,GAASmD,EAAAA,EAAAA,IAAoBpB,GAC9B,EAEGqB,EAAWlD,GAAgBA,EAAamD,QAAO,SAAAzB,GAAM,OAAIA,EAAOhC,KAAKiC,cAAcyB,SAA1B,UAAsCd,GAA1C,IAE3D,OACI,UAACG,EAAD,WAEqB,IAApBS,EAASG,SAAiBlD,IAAcyC,IAAW,+CAEnDA,IAAW,wBAAKA,IAEhBM,EAASI,KAAI,SAAApC,GAAK,OACf,UAACwB,EAAD,gBAA8BxB,EAAMxB,KAApC,KAA4CwB,EAAMtB,QAClD,SAAC+C,EAAD,CAAUd,GAAIX,EAAMW,GAAI0B,QAASP,EAAjC,SAA8C7C,EAAY,aAAe,cADxD2B,EAAAA,EAAAA,MADF,MAQ1B,ECxCY3C,EAAYC,EAAAA,EAAAA,IAAH,oDCIP,SAASoE,IACpB,IAAMxD,GAAeC,EAAAA,EAAAA,KAAY,SAAAwD,GAAK,OAAEA,EAAMC,QAAR,IACtC,OACI,UAAC,EAAD,YACA,uCACA,SAACC,EAAD,KAGA,sCACA,SAAC,EAAD,IAEC3D,IACD,SAAC,EAAD,MAIL,C","sources":["components/ContactsForm/ContactFormStyled.jsx","components/ContactsForm/ContactForm.jsx","components/Filter/FilterStyled.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsListStyled.jsx","components/ContactsList/ContactsList.jsx","components/AppStyled.jsx","pages/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled'\n\nexport const Container = styled.div`\nmargin-bottom:30px;\n`\n\nexport const Form = styled.form`\nborder:2px solid black;\nwidth:300px;\npadding:10px 10px;\ndisplay:flex;\nflex-direction:column;\nborder-radius:4px;\n`\n\nexport const Text = styled.p`\nmargin:0px;\n`\n\nexport const Button = styled.button`\nwidth:150px;\npadding-bottom:4px;\npadding-top:4px;\nfont-size:15px;\nborder:1px solid black;\n`\n\nexport const InputText = styled.input`\nwidth:200px;\nheight:20px;\nborder:1px solid black;\nmargin:10px 0px 20px 0px;\n`\n","import React,{ useState } from 'react'\nimport { Container,Form,Button,Text,InputText } from './ContactFormStyled';\nimport { addContactsThunk } from 'redux/fetchOperations';\nimport { nanoid } from 'nanoid'\nimport { useDispatch } from \"react-redux\";\nimport { reduxContacts,reduxIsLoading } from 'redux/selectors';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nconst NewPhoneBookContainer = () =>{\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n\n    const dispatch = useDispatch()\n    const contactsList = useSelector(reduxContacts)\n    const isLoading = useSelector(reduxIsLoading)\n\n    const wrongRegister = (info) => {\n        return toast.error(`${info} is already in contact`, {\n          position: \"top-right\",\n          autoClose: 2500,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: \"dark\",\n          });\n      } \n\n    const currentName = (event) =>{\n        const {name,value} = event.currentTarget\n        \n        switch(name){\n            case 'name':\n        return setName(value)\n            case 'number':\n        return setNumber(value)\n            default:\n        return console.log('Wrong qwery')\n        }\n    }\n\n    const addNewContact = (event) => {\n        event.preventDefault()\n        if(contactsList.find(option => option.name.toLowerCase() === `${name}`.toLowerCase())){\n          return wrongRegister(name)\n        }\n    \n        if(contactsList.find(option => option.number === `${number}`)){\n          return wrongRegister(number)\n        }\n        \n        const newContact = {id: `${nanoid()}`, name:`${name}`, number:`${number}`}\n        dispatch(addContactsThunk(newContact))\n        event.currentTarget.reset()\n    }\n\n    return (\n        <Container>\n        <Form onSubmit={addNewContact}>\n        <Text>Name</Text>\n        <InputText\n        onChange={currentName}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        />\n        <Text>Number</Text>\n        <InputText\n        onChange={currentName}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n        />\n        <Button type='submit'>{isLoading ? 'Loadind...' : 'Add Contacts'}</Button>\n        </Form>\n        \n        </Container>\n    )\n}\n\nexport default NewPhoneBookContainer;\n","import styled from '@emotion/styled'\n\nexport const Title = styled.h2`\n`\n\nexport const Text = styled.p`\nmargin:0px;\n`\n\nexport const InputText = styled.input`\nwidth:200px;\nheight:20px;\nborder:1px solid black;\nmargin:10px 0px 20px 0px;\n`","import {Text,InputText} from './FilterStyled'\nimport { useDispatch,useSelector } from 'react-redux'\nimport { filterContacts } from 'redux/filterListReducer'\nimport { reduxFilter } from 'redux/selectors'\nconst Filter = () => {\n\n    const dispatch = useDispatch()\n    const filterValue = useSelector(reduxFilter)\n    \n    const filterName = (event) =>{\n      dispatch(filterContacts({ filterValue: event.currentTarget.value.toLowerCase()}))\n    }\n\n     return(\n            <>\n            <Text>Find contacts by name</Text>\n            <InputText\n            onChange={filterName}\n            name=\"filter\"\n            value={ filterValue }\n            />\n            </>\n        )\n}\n\nexport default Filter","import styled from '@emotion/styled'\n\nexport const UlContacts = styled.ul`\npadding-left:20px;\n`\n\nexport const LiContacts = styled.li`\nmargin-bottom:10px;\n`\n\nexport const LiButton =styled.button`\nmargin-left:20px;\nborder:1px solid black;\npadding: 2px 5px;\nfont-size: 15px;\n`","import {UlContacts,LiContacts,LiButton} from './ContactsListStyled'\nimport { nanoid } from 'nanoid'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getContactsThunk, deleteContactsThunk } from 'redux/fetchOperations'\nimport { useEffect } from 'react'\nimport { reduxContacts,reduxFilter,reduxIsLoading,reduxError } from 'redux/selectors'\n\nconst ContactsList = () => {\n    \n    const dispatch = useDispatch()\n    const contactsList = useSelector(reduxContacts)\n    const filterValue = useSelector(reduxFilter)\n    const isLoading = useSelector(reduxIsLoading)\n    const isError = useSelector(reduxError)\n\n    useEffect(() => {\n        dispatch(getContactsThunk()); \n      }, [dispatch]);    \n\n    const deleteName = (event) =>{\n        console.log('deleteButtton')\n        const id = event.currentTarget.id\n        dispatch(deleteContactsThunk(id))\n      }\n    \n    const newState = contactsList && contactsList.filter(option => option.name.toLowerCase().includes(`${filterValue}`))\n\n    return(\n        <UlContacts>\n\n        {newState.length === 0 && !isLoading && !isError && <h3>No contacts found.</h3>}\n\n        {isError && <h3>{isError}</h3>}\n\n        {newState.map(event =>(\n            <LiContacts key={nanoid()}>- {event.name}: {event.number}\n            <LiButton id={event.id} onClick={deleteName}>{isLoading ? 'Loadind...' : 'Delete'}</LiButton>\n            </LiContacts>\n            \n        ))}\n    </UlContacts>\n    )\n}\n\n\n\nexport default ContactsList","import styled from '@emotion/styled'\n\nexport const Container = styled.div`\nmargin: 30px 0px 0px 30px;\n`","import ContactForm from 'components/ContactsForm/ContactForm'\nimport Filter from '../components/Filter/Filter'\nimport ContactsList from 'components/ContactsList/ContactsList'\nimport {Container} from 'components/AppStyled'\nimport { useSelector } from 'react-redux'\n\nexport default function Contacts() {\n    const contactsList = useSelector(state=>state.contacts)\n    return (\n        <Container>\n        <h1>PhoneBook</h1>\n        <ContactForm\n        />\n        \n        <h2>Contacts</h2>\n        <Filter\n        />\n        {contactsList && \n        <ContactsList\n        /> }\n        </Container>\n    );\n  }"],"names":["Container","styled","Form","Text","Button","InputText","useState","name","setName","number","setNumber","dispatch","useDispatch","contactsList","useSelector","reduxContacts","isLoading","reduxIsLoading","wrongRegister","info","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","currentName","event","currentTarget","value","console","log","onSubmit","preventDefault","find","option","toLowerCase","newContact","id","nanoid","addContactsThunk","reset","onChange","type","pattern","title","required","filterValue","reduxFilter","filterContacts","UlContacts","LiContacts","LiButton","isError","reduxError","useEffect","getContactsThunk","deleteName","deleteContactsThunk","newState","filter","includes","length","map","onClick","Contacts","state","contacts","ContactForm"],"sourceRoot":""}